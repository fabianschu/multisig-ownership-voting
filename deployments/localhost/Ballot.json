{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "AddedOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ChangedThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "ProposalAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RemovedOwner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_INT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isMajorityVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "enum Ballot.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "internalType": "enum Ballot.ProposalStatus",
          "name": "proposalStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9853316da20d30ebca9ae1e200e67ca38ec394c158c0fddb73345ea40b00016",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "2749194",
    "logsBloom": "0x
    "blockHash": "0x590956339e19b2b0287c2ccf6179300d92e19af7fda7a2aa11e8e7f1096541fa",
    "transactionHash": "0xf9853316da20d30ebca9ae1e200e67ca38ec394c158c0fddb73345ea40b00016",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "2749194",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "solcInputHash": "d78c9642f25a2bbd4d2da2dfb189f914",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isMajorityVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"enum Ballot.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"enum Ballot.ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addProposal(uint256,address)\":{\"details\":\"Allows to add a new proposal about adding or removing owner.      The proposer automatically votes on her proposal.\"},\"executeProposal(uint256)\":{\"details\":\"Adds or removes an owner as specified by the accepted proposal.      Is public to enable external triggering of execution.      This is important when majority ratios of Liquidity Pool have changed.      E.g. a major LP leaves the pool, so that a majority for a proposal is suddenly reached.\"},\"getOwners()\":{\"details\":\"Returns array of owners.\",\"returns\":{\"_0\":\"Array of Safe owners.\"}},\"isMajorityVote(uint256)\":{\"details\":\"Checks if a majority of LP token holders has voted for proposal.\",\"returns\":{\"_0\":\"Returns true if majority is reached.\"}},\"stake()\":{\"details\":\"Allows to stake all liquidity provider (LP) tokens from the balancer pool.      Without staking voting/proposing is not possible.      This contract must have been approved with the balancer pool first.\"},\"unstake()\":{\"details\":\"Allows to unstake LP tokens.      Triggers removal of outstanding votes to avoid double voting.\"},\"vote(uint256)\":{\"details\":\"Allows to vote on a proposal.      If majority is reached (votes > half of total supply of LP tokens) proposal is executed.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProposal(uint256,address)\":{\"notice\":\"Updates proposals. Updates the total number of proposals.\"},\"executeProposal(uint256)\":{\"notice\":\"Sets the proposal status to closed.\"},\"stake()\":{\"notice\":\"Updates the caller's stakes.\"},\"unstake()\":{\"notice\":\"Updates the caller's stakes. Removes caller's votes from open proposals.\"},\"vote(uint256)\":{\"notice\":\"Updates votes on a proposal. Marks that voter has voted for a proposal (= update to votes)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ballot.sol\":\"Ballot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./OwnerManager.sol\\\";\\nimport \\\"./IBPool.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract Ballot is OwnerManager {\\n\\n    enum ProposalType { addOwner, removeOwner }\\n    enum ProposalStatus { closed, open }\\n\\n    struct Proposal {\\n        ProposalType proposalType;\\n        address owner;\\n        uint votes;\\n        ProposalStatus proposalStatus;\\n    }\\n\\n    event ProposalAdded (uint index, uint proposalType, address target);\\n\\n    modifier onlyStaker() {\\n        require(stakes[msg.sender] != 0, \\\"B2\\\");\\n        _;\\n    }\\n\\n    modifier activeProposal(uint _index) {\\n        require(proposals[_index].owner != address(0), \\\"B3\\\");\\n        require(proposals[_index].proposalStatus == ProposalStatus.open, \\\"B3\\\");\\n        _;\\n    }\\n\\n    IERC20 internal bPool;\\n    uint constant public MAX_INT = type(uint).max;    \\n    uint public numberProposals;\\n    mapping(address => uint) public stakes;\\n    mapping(address => uint[]) public votes;\\n    mapping(uint => Proposal) public proposals;\\n\\n    constructor(address _bPool) {\\n        bPool = IERC20(_bPool);\\n    }\\n\\n    /// @dev Allows to stake all liquidity provider (LP) tokens from the balancer pool.\\n    ///      Without staking voting/proposing is not possible.\\n    ///      This contract must have been approved with the balancer pool first.\\n    /// @notice Updates the caller's stakes.\\n    function stake() public {\\n        uint allowance = bPool.allowance(msg.sender, address(this));\\n        require(allowance == MAX_INT, \\\"B1\\\");\\n\\n        uint stakerBalance = bPool.balanceOf(msg.sender);\\n        bPool.transferFrom(msg.sender, address(this), stakerBalance);\\n        stakes[msg.sender] = stakerBalance;\\n    }\\n    \\n    /// @dev Allows to unstake LP tokens.\\n    ///      Triggers removal of outstanding votes to avoid double voting.\\n    /// @notice Updates the caller's stakes. Removes caller's votes from open proposals.\\n    function unstake() public onlyStaker {\\n        bPool.transfer(msg.sender, stakes[msg.sender]);\\n        uint[] memory openVotes = votes[msg.sender];\\n        for (uint i = 0; i < openVotes.length; i++) {\\n            if (proposals[openVotes[i]].proposalStatus == ProposalStatus.open) {\\n                proposals[openVotes[i]].votes -= stakes[msg.sender];\\n            }\\n        }\\n        stakes[msg.sender] = 0;\\n        votes[msg.sender] = new uint[](0);\\n    }\\n\\n    /// @dev Allows to add a new proposal about adding or removing owner.\\n    ///      The proposer automatically votes on her proposal.\\n    /// @notice Updates proposals. Updates the total number of proposals.\\n    function addProposal(uint _type, address _target) public onlyStaker {\\n        require(_target != address(0), \\\"B4\\\");\\n        Proposal memory proposal = Proposal(\\n            ProposalType(_type),\\n            _target,\\n            0,\\n            ProposalStatus.open\\n        );\\n    \\n        emit ProposalAdded(numberProposals, _type, _target);\\n        proposals[numberProposals] = proposal;\\n        vote(numberProposals);\\n        numberProposals++;\\n    }\\n\\n    /// @dev Allows to vote on a proposal.\\n    ///      If majority is reached (votes > half of total supply of LP tokens) proposal is executed.\\n    /// @notice Updates votes on a proposal. Marks that voter has voted for a proposal (= update to votes)\\n    function vote(uint _index) public onlyStaker activeProposal(_index) {\\n        require(!hasAlreadyVoted(_index), \\\"B5\\\");\\n\\n        proposals[_index].votes += stakes[msg.sender];\\n        if (isMajorityVote(_index)) {\\n            executeProposal(_index);\\n        } else {\\n            votes[msg.sender].push(_index);\\n        }\\n    }\\n\\n    /// @dev Checks if voter has already voted on proposal.\\n    ///      If majority is reached (votes > half of total supply of LP tokens) proposal is executed.\\n    /// @return Returns true if attempted double vote.\\n    function hasAlreadyVoted(uint _index) internal view returns(bool) {\\n        for (uint i = 0; i < votes[msg.sender].length; i++) {\\n            if (votes[msg.sender][i] == _index) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Checks if a majority of LP token holders has voted for proposal.\\n    /// @return Returns true if majority is reached.\\n    function isMajorityVote(uint _index) public view returns(bool){\\n        uint total = bPool.totalSupply();\\n        return proposals[_index].votes * 2 > total;\\n    }\\n\\n    /// @dev Adds or removes an owner as specified by the accepted proposal.\\n    ///      Is public to enable external triggering of execution.\\n    ///      This is important when majority ratios of Liquidity Pool have changed.\\n    ///      E.g. a major LP leaves the pool, so that a majority for a proposal is suddenly reached.\\n    /// @notice Sets the proposal status to closed.\\n    function executeProposal(uint _index) public {\\n        require(isMajorityVote(_index), \\\"B6\\\");\\n\\n        uint newSafeThreshold = newMultiSigThreshold(proposals[_index].proposalType);\\n        address elected = proposals[_index].owner;\\n        if (proposals[_index].proposalType == ProposalType.addOwner) {\\n            addOwnerWithThreshold(elected, newSafeThreshold);\\n        } else {\\n            address[] memory currentOwners = getOwners();\\n            address prevOwner = SENTINEL_OWNERS;\\n            address owner;\\n            for (uint i; i < currentOwners.length; i++) {\\n                if (currentOwners[i] == proposals[_index].owner) {\\n                    owner = currentOwners[i];\\n                    if(i != 0) {\\n                        prevOwner = currentOwners[i - 1];\\n                    }\\n                }\\n            }\\n            removeOwner(prevOwner, owner, newSafeThreshold);\\n        }\\n        proposals[_index].proposalStatus = ProposalStatus.closed;\\n    }\\n\\n    /// @dev Calculates the threshold for the multisig contract\\n    ///      Makes sure that the threshold is always just above 50%.\\n    /// @return The smallest possible majority threshold.\\n    function newMultiSigThreshold(ProposalType _proposalType) internal view returns(uint) {\\n        uint nextOwnerCount;\\n        uint nextThreshold = threshold;\\n\\n        if (_proposalType == ProposalType.addOwner) {\\n            nextOwnerCount = ownerCount + 1;\\n            if (threshold * 2 <= nextOwnerCount) {\\n                nextThreshold++;\\n            }\\n        } else if (_proposalType == ProposalType.removeOwner) {\\n            nextOwnerCount = ownerCount - 1;\\n            if ((threshold - 1) * 2 > nextOwnerCount) {\\n                nextThreshold--;\\n            }\\n        } \\n\\n        require(nextOwnerCount > 0, \\\"B7\\\");\\n\\n        return nextThreshold; \\n    }\\n}\\n\",\"keccak256\":\"0xba2ea4137951d4c63f659dee48c6d0013166cca6132a1b022ab7bfc5521a2aa2\",\"license\":\"GPL-3.0\"},\"contracts/IBPool.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IBPool {\\n    function rebind(address token, uint balance, uint denorm) external;\\n    function setSwapFee(uint swapFee) external;\\n    function setPublicSwap(bool publicSwap) external;\\n    function bind(address token, uint balance, uint denorm) external;\\n    function unbind(address token) external;\\n    function gulp(address token) external;\\n    function isBound(address token) external view returns(bool);\\n    function getBalance(address token) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function getSwapFee() external view returns (uint);\\n    function isPublicSwap() external view returns (bool);\\n    function isFinalized() external view returns (bool);\\n    function getNumTokens() external view returns (uint);\\n    function getFinalTokens() external view returns (address[] memory tokens);\\n    function getNormalizedWeight(address token) external view returns (uint);\\n    function getController() external view returns (address);\\n    function setController(address manager) external;\\n    function finalize() external;\\n    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXIT_FEE() external view returns (uint);\\n \\n    function calcPoolOutGivenSingleIn(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountIn,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountOut,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountIn,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountOut,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint poolAmountIn);\\n\\n    function getCurrentTokens()\\n        external view\\n        returns (address[] memory tokens);\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        address tokenOut,\\n        uint minAmountOut,\\n        uint maxPrice\\n    )\\n        external\\n        returns (uint tokenAmountOut, uint spotPriceAfter);\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint maxAmountIn,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPrice\\n    )\\n        external\\n        returns (uint tokenAmountIn, uint spotPriceAfter);\\n    function joinswapExternAmountIn(address tokenIn, uint tokenAmountIn, uint minPoolAmountOut)\\n        external\\n        returns (uint poolAmountOut);\\n    function joinswapPoolAmountOut(address tokenIn, uint poolAmountOut, uint maxAmountIn)\\n        external\\n        returns (uint tokenAmountIn);\\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut)\\n        external\\n        returns (uint tokenAmountOut);\\n    function exitswapExternAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn)\\n        external\\n        returns (uint poolAmountIn);\\n}\\n\",\"keccak256\":\"0x1c6eef17e8af637c619e6420778f66d6755d4c6a5c859039202870c114ca17ec\"},\"contracts/OwnerManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\\n/// @author Stefan George - <stefan@gnosis.pm>\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract OwnerManager {\\n    event AddedOwner(address owner);\\n    event RemovedOwner(address owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    constructor() {\\n        threshold = 1;\\n        ownerCount = 1;\\n        owners[SENTINEL_OWNERS] = msg.sender;\\n        owners[msg.sender] = SENTINEL_OWNERS;\\n    }\\n\\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n    /// @param owner New owner address.\\n    /// @param _threshold New threshold.\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) internal {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n    /// @param owner Owner address to be removed.\\n    /// @param _threshold New threshold.\\n    function removeOwner(\\n        address prevOwner,\\n        address owner,\\n        uint256 _threshold\\n    ) internal {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /// @dev Allows to update the number of required confirmations by Safe owners.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Changes the threshold of the Safe to `_threshold`.\\n    /// @param _threshold New threshold.\\n    function changeThreshold(uint256 _threshold) internal {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /// @dev Returns array of owners.\\n    /// @return Array of Safe owners.\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x872c8edeb0e8dce9ad864376a1e23b49c4ef4a04f7df31d8d1d3ab883a7a2d51\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed src, address indexed dst, uint amt);\\n    event Transfer(address indexed src, address indexed dst, uint amt);\\n\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address whom) external view returns (uint);\\n    function allowance(address src, address dst) external view returns (uint);\\n\\n    function approve(address dst, uint amt) external returns (bool);\\n    function transfer(address dst, uint amt) external returns (bool);\\n    function transferFrom(\\n        address src, address dst, uint amt\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb9f4386d7bd3f9f32dd20810ad1d39836ef5b537973a06b266c0154c5e060ac0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003124380380620031248339818101604052810190620000379190620001a1565b60016002819055506001808190555033600080600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200021b565b6000815190506200019b8162000201565b92915050565b600060208284031215620001b457600080fd5b6000620001c4848285016200018a565b91505092915050565b6000620001da82620001e1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200020c81620001cd565b81146200021857600080fd5b50565b612ef9806200022b6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80633447d0d11161008c5780639f2524ee116100665780639f2524ee14610226578063a0e67e2b14610256578063e75235b814610274578063eb19690814610292576100ea565b80633447d0d1146101e25780633a4b66f11461020057806341b0953c1461020a576100ea565b80630d61b519116100c85780630d61b5191461015c57806316934fc4146101785780632def6620146101a85780632f54bf6e146101b2576100ea565b80630121b93f146100ef578063013cf08b1461010b578063098d32281461013e575b600080fd5b6101096004803603810190610104919061246f565b6102c2565b005b6101256004803603810190610120919061246f565b6105fd565b60405161013594939291906129ae565b60405180910390f35b610146610667565b6040516101539190612b73565b60405180910390f35b6101766004803603810190610171919061246f565b61068b565b005b610192600480360381019061018d91906123e1565b6109db565b60405161019f9190612b73565b60405180910390f35b6101b06109f3565b005b6101cc60048036038101906101c791906123e1565b610eaa565b6040516101d99190612993565b60405180910390f35b6101ea610f7b565b6040516101f79190612b73565b60405180910390f35b610208610f81565b005b610224600480360381019061021f91906124c1565b61123d565b005b610240600480360381019061023b919061240a565b61158f565b60405161024d9190612b73565b60405180910390f35b61025e6115c0565b60405161026b9190612971565b60405180910390f35b61027c6117c2565b6040516102899190612b73565b60405180910390f35b6102ac60048036038101906102a7919061246f565b6117cc565b6040516102b99190612993565b60405180910390f35b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033c90612ad3565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff166007600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390612a53565b60405180910390fd5b600180811115610425577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6007600083815260200190815260200160002060020160009054906101000a900460ff166001811115610481577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146104c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b890612a53565b60405180910390fd5b6104ca8261189e565b1561050a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050190612a93565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460076000848152602001908152602001600020600101600082825461056f9190612c0f565b9250508190555061057f826117cc565b156105925761058d8261068b565b6105f9565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150555b5050565b60076020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905084565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b610694816117cc565b6106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca90612b33565b60405180910390fd5b60006107016007600084815260200190815260200160002060000160009054906101000a900460ff166119a1565b905060006007600084815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006001811115610778577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6007600085815260200190815260200160002060000160009054906101000a900460ff1660018111156107d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156107e9576107e48183611b64565b610971565b60006107f36115c0565b90506000600190506000805b8351811015610961576007600088815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684828151811061088e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561094e578381815181106108eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015191506000811461094d578360018261090b9190612cbf565b81518110610942577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015192505b5b808061095990612daf565b9150506107ff565b5061096d828287611ed2565b5050505b60006007600085815260200190815260200160002060020160006101000a81548160ff021916908360018111156109d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550505050565b60056020528060005260406000206000915090505481565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610a76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6d90612ad3565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b8152600401610b12929190612948565b602060405180830381600087803b158015610b2c57600080fd5b505af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190612446565b506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610bf057602002820191906000526020600020905b815481526020019060010190808311610bdc575b5050505050905060005b8151811015610d9e57600180811115610c3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000848481518110610c79577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060020160009054906101000a900460ff166001811115610cd8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610d8b57600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460076000848481518110610d5b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181526020019081526020016000206001016000828254610d839190612cbf565b925050819055505b8080610d9690612daf565b915050610bfa565b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600067ffffffffffffffff811115610e25577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e535781602001602082028036833780820191505090505b50600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610ea6929190612323565b5050565b6000600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610f745750600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b60045481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610fe09291906128e8565b60206040518083038186803b158015610ff857600080fd5b505afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110309190612498565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b906129f3565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016110f191906128cd565b60206040518083038186803b15801561110957600080fd5b505afa15801561111d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111419190612498565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016111a293929190612911565b602060405180830381600087803b1580156111bc57600080fd5b505af11580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190612446565b5080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156112c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b790612ad3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132790612ab3565b60405180910390fd5b60006040518060800160405280846001811115611376577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156113ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020018373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160018081111561140f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81525090507f0baf6248b3316c453844239a936fa982731ff4629cd5238965bafb36c07092d7600454848460405161144993929190612b8e565b60405180910390a18060076000600454815260200190815260200160002060008201518160000160006101000a81548160ff021916908360018111156114b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020160006101000a81548160ff0219169083600181111561155f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055509050506115726004546102c2565b6004600081548092919061158590612daf565b9190505550505050565b600660205281600052604060002081815481106115ab57600080fd5b90600052602060002001600091509150505481565b6060600060015467ffffffffffffffff811115611606577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116345781602001602082028036833780820191505090505b509050600080806000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146117b9578083838151811061170b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081806117b190612daf565b92505061169d565b82935050505090565b6000600254905090565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561183757600080fd5b505afa15801561184b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186f9190612498565b905080600260076000868152602001908152602001600020600101546118959190612c65565b11915050919050565b600080600090505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156119965782600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611968577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154141561198357600191505061199c565b808061198e90612daf565b9150506118a6565b50600090505b919050565b60008060006002549050600060018111156119e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846001811115611a1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611a5c5760018054611a329190612c0f565b91508160028054611a439190612c65565b11611a57578080611a5390612daf565b9150505b611b17565b600180811115611a95577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846001811115611ace577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611b165760018054611ae29190612cbf565b91508160026001600254611af69190612cbf565b611b009190612c65565b1115611b15578080611b1190612d85565b9150505b5b5b60008211611b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5190612a13565b60405180910390fd5b8092505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611bce5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015611c0657503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b611c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3c90612a73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0990612b13565b60405180910390fd5b600080600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600080600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016000815480929190611e7f90612daf565b91905055507f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2682604051611eb391906128cd565b60405180910390a18060025414611ece57611ecd81612257565b5b5050565b8060018054611ee19190612cbf565b1015611f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1990612a33565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611f8c5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b611fcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc290612a73565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208e90612b53565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600081548092919061220390612d85565b91905055507ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf8260405161223791906128cd565b60405180910390a180600254146122525761225181612257565b5b505050565b60015481111561229c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229390612a33565b60405180910390fd5b60018110156122e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d790612af3565b60405180910390fd5b806002819055507f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c936002546040516123189190612b73565b60405180910390a150565b82805482825590600052602060002090810192821561235f579160200282015b8281111561235e578251825591602001919060010190612343565b5b50905061236c9190612370565b5090565b5b80821115612389576000816000905550600101612371565b5090565b60008135905061239c81612e7e565b92915050565b6000815190506123b181612e95565b92915050565b6000813590506123c681612eac565b92915050565b6000815190506123db81612eac565b92915050565b6000602082840312156123f357600080fd5b60006124018482850161238d565b91505092915050565b6000806040838503121561241d57600080fd5b600061242b8582860161238d565b925050602061243c858286016123b7565b9150509250929050565b60006020828403121561245857600080fd5b6000612466848285016123a2565b91505092915050565b60006020828403121561248157600080fd5b600061248f848285016123b7565b91505092915050565b6000602082840312156124aa57600080fd5b60006124b8848285016123cc565b91505092915050565b600080604083850312156124d457600080fd5b60006124e2858286016123b7565b92505060206124f38582860161238d565b9150509250929050565b60006125098383612515565b60208301905092915050565b61251e81612cf3565b82525050565b61252d81612cf3565b82525050565b600061253e82612bd5565b6125488185612bed565b935061255383612bc5565b8060005b8381101561258457815161256b88826124fd565b975061257683612be0565b925050600181019050612557565b5085935050505092915050565b61259a81612d05565b82525050565b6125a981612d61565b82525050565b6125b881612d73565b82525050565b60006125cb600283612bfe565b91507f42310000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061260b600283612bfe565b91507f42370000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061264b600583612bfe565b91507f47533230310000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061268b600283612bfe565b91507f42330000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006126cb600583612bfe565b91507f47533230330000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061270b600283612bfe565b91507f42350000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061274b600283612bfe565b91507f42340000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061278b600283612bfe565b91507f42320000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006127cb600583612bfe565b91507f47533230320000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061280b600583612bfe565b91507f47533230340000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061284b600283612bfe565b91507f42360000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061288b600583612bfe565b91507f47533230350000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6128c781612d57565b82525050565b60006020820190506128e26000830184612524565b92915050565b60006040820190506128fd6000830185612524565b61290a6020830184612524565b9392505050565b60006060820190506129266000830186612524565b6129336020830185612524565b61294060408301846128be565b949350505050565b600060408201905061295d6000830185612524565b61296a60208301846128be565b9392505050565b6000602082019050818103600083015261298b8184612533565b905092915050565b60006020820190506129a86000830184612591565b92915050565b60006080820190506129c360008301876125af565b6129d06020830186612524565b6129dd60408301856128be565b6129ea60608301846125a0565b95945050505050565b60006020820190508181036000830152612a0c816125be565b9050919050565b60006020820190508181036000830152612a2c816125fe565b9050919050565b60006020820190508181036000830152612a4c8161263e565b9050919050565b60006020820190508181036000830152612a6c8161267e565b9050919050565b60006020820190508181036000830152612a8c816126be565b9050919050565b60006020820190508181036000830152612aac816126fe565b9050919050565b60006020820190508181036000830152612acc8161273e565b9050919050565b60006020820190508181036000830152612aec8161277e565b9050919050565b60006020820190508181036000830152612b0c816127be565b9050919050565b60006020820190508181036000830152612b2c816127fe565b9050919050565b60006020820190508181036000830152612b4c8161283e565b9050919050565b60006020820190508181036000830152612b6c8161287e565b9050919050565b6000602082019050612b8860008301846128be565b92915050565b6000606082019050612ba360008301866128be565b612bb060208301856128be565b612bbd6040830184612524565b949350505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612c1a82612d57565b9150612c2583612d57565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c5a57612c59612df8565b5b828201905092915050565b6000612c7082612d57565b9150612c7b83612d57565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cb457612cb3612df8565b5b828202905092915050565b6000612cca82612d57565b9150612cd583612d57565b925082821015612ce857612ce7612df8565b5b828203905092915050565b6000612cfe82612d37565b9050919050565b60008115159050919050565b6000819050612d1f82612e56565b919050565b6000819050612d3282612e6a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612d6c82612d11565b9050919050565b6000612d7e82612d24565b9050919050565b6000612d9082612d57565b91506000821415612da457612da3612df8565b5b600182039050919050565b6000612dba82612d57565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ded57612dec612df8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612e6757612e66612e27565b5b50565b60028110612e7b57612e7a612e27565b5b50565b612e8781612cf3565b8114612e9257600080fd5b50565b612e9e81612d05565b8114612ea957600080fd5b50565b612eb581612d57565b8114612ec057600080fd5b5056fea26469706673582212204f28546cf2b7e4a61305ad6cac0de85654b770a959dde07b9aa69888c814c7ff64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80633447d0d11161008c5780639f2524ee116100665780639f2524ee14610226578063a0e67e2b14610256578063e75235b814610274578063eb19690814610292576100ea565b80633447d0d1146101e25780633a4b66f11461020057806341b0953c1461020a576100ea565b80630d61b519116100c85780630d61b5191461015c57806316934fc4146101785780632def6620146101a85780632f54bf6e146101b2576100ea565b80630121b93f146100ef578063013cf08b1461010b578063098d32281461013e575b600080fd5b6101096004803603810190610104919061246f565b6102c2565b005b6101256004803603810190610120919061246f565b6105fd565b60405161013594939291906129ae565b60405180910390f35b610146610667565b6040516101539190612b73565b60405180910390f35b6101766004803603810190610171919061246f565b61068b565b005b610192600480360381019061018d91906123e1565b6109db565b60405161019f9190612b73565b60405180910390f35b6101b06109f3565b005b6101cc60048036038101906101c791906123e1565b610eaa565b6040516101d99190612993565b60405180910390f35b6101ea610f7b565b6040516101f79190612b73565b60405180910390f35b610208610f81565b005b610224600480360381019061021f91906124c1565b61123d565b005b610240600480360381019061023b919061240a565b61158f565b60405161024d9190612b73565b60405180910390f35b61025e6115c0565b60405161026b9190612971565b60405180910390f35b61027c6117c2565b6040516102899190612b73565b60405180910390f35b6102ac60048036038101906102a7919061246f565b6117cc565b6040516102b99190612993565b60405180910390f35b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033c90612ad3565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff166007600083815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156103ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e390612a53565b60405180910390fd5b600180811115610425577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6007600083815260200190815260200160002060020160009054906101000a900460ff166001811115610481577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146104c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b890612a53565b60405180910390fd5b6104ca8261189e565b1561050a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050190612a93565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460076000848152602001908152602001600020600101600082825461056f9190612c0f565b9250508190555061057f826117cc565b156105925761058d8261068b565b6105f9565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150555b5050565b60076020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905084565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b610694816117cc565b6106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca90612b33565b60405180910390fd5b60006107016007600084815260200190815260200160002060000160009054906101000a900460ff166119a1565b905060006007600084815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006001811115610778577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6007600085815260200190815260200160002060000160009054906101000a900460ff1660018111156107d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156107e9576107e48183611b64565b610971565b60006107f36115c0565b90506000600190506000805b8351811015610961576007600088815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684828151811061088e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561094e578381815181106108eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015191506000811461094d578360018261090b9190612cbf565b81518110610942577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015192505b5b808061095990612daf565b9150506107ff565b5061096d828287611ed2565b5050505b60006007600085815260200190815260200160002060020160006101000a81548160ff021916908360018111156109d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550505050565b60056020528060005260406000206000915090505481565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610a76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6d90612ad3565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b8152600401610b12929190612948565b602060405180830381600087803b158015610b2c57600080fd5b505af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190612446565b506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610bf057602002820191906000526020600020905b815481526020019060010190808311610bdc575b5050505050905060005b8151811015610d9e57600180811115610c3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000848481518110610c79577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060020160009054906101000a900460ff166001811115610cd8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610d8b57600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460076000848481518110610d5b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181526020019081526020016000206001016000828254610d839190612cbf565b925050819055505b8080610d9690612daf565b915050610bfa565b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600067ffffffffffffffff811115610e25577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e535781602001602082028036833780820191505090505b50600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610ea6929190612323565b5050565b6000600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610f745750600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b60045481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610fe09291906128e8565b60206040518083038186803b158015610ff857600080fd5b505afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110309190612498565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b906129f3565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016110f191906128cd565b60206040518083038186803b15801561110957600080fd5b505afa15801561111d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111419190612498565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016111a293929190612911565b602060405180830381600087803b1580156111bc57600080fd5b505af11580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190612446565b5080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156112c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b790612ad3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132790612ab3565b60405180910390fd5b60006040518060800160405280846001811115611376577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156113ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020018373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160018081111561140f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81525090507f0baf6248b3316c453844239a936fa982731ff4629cd5238965bafb36c07092d7600454848460405161144993929190612b8e565b60405180910390a18060076000600454815260200190815260200160002060008201518160000160006101000a81548160ff021916908360018111156114b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020160006101000a81548160ff0219169083600181111561155f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055509050506115726004546102c2565b6004600081548092919061158590612daf565b9190505550505050565b600660205281600052604060002081815481106115ab57600080fd5b90600052602060002001600091509150505481565b6060600060015467ffffffffffffffff811115611606577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116345781602001602082028036833780820191505090505b509050600080806000600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146117b9578083838151811061170b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081806117b190612daf565b92505061169d565b82935050505090565b6000600254905090565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561183757600080fd5b505afa15801561184b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186f9190612498565b905080600260076000868152602001908152602001600020600101546118959190612c65565b11915050919050565b600080600090505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156119965782600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611968577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154141561198357600191505061199c565b808061198e90612daf565b9150506118a6565b50600090505b919050565b60008060006002549050600060018111156119e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846001811115611a1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611a5c5760018054611a329190612c0f565b91508160028054611a439190612c65565b11611a57578080611a5390612daf565b9150505b611b17565b600180811115611a95577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b846001811115611ace577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611b165760018054611ae29190612cbf565b91508160026001600254611af69190612cbf565b611b009190612c65565b1115611b15578080611b1190612d85565b9150505b5b5b60008211611b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5190612a13565b60405180910390fd5b8092505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611bce5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015611c0657503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b611c45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3c90612a73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0990612b13565b60405180910390fd5b600080600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600080600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016000815480929190611e7f90612daf565b91905055507f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea2682604051611eb391906128cd565b60405180910390a18060025414611ece57611ecd81612257565b5b5050565b8060018054611ee19190612cbf565b1015611f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1990612a33565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611f8c5750600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b611fcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc290612a73565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208e90612b53565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600081548092919061220390612d85565b91905055507ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf8260405161223791906128cd565b60405180910390a180600254146122525761225181612257565b5b505050565b60015481111561229c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229390612a33565b60405180910390fd5b60018110156122e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d790612af3565b60405180910390fd5b806002819055507f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c936002546040516123189190612b73565b60405180910390a150565b82805482825590600052602060002090810192821561235f579160200282015b8281111561235e578251825591602001919060010190612343565b5b50905061236c9190612370565b5090565b5b80821115612389576000816000905550600101612371565b5090565b60008135905061239c81612e7e565b92915050565b6000815190506123b181612e95565b92915050565b6000813590506123c681612eac565b92915050565b6000815190506123db81612eac565b92915050565b6000602082840312156123f357600080fd5b60006124018482850161238d565b91505092915050565b6000806040838503121561241d57600080fd5b600061242b8582860161238d565b925050602061243c858286016123b7565b9150509250929050565b60006020828403121561245857600080fd5b6000612466848285016123a2565b91505092915050565b60006020828403121561248157600080fd5b600061248f848285016123b7565b91505092915050565b6000602082840312156124aa57600080fd5b60006124b8848285016123cc565b91505092915050565b600080604083850312156124d457600080fd5b60006124e2858286016123b7565b92505060206124f38582860161238d565b9150509250929050565b60006125098383612515565b60208301905092915050565b61251e81612cf3565b82525050565b61252d81612cf3565b82525050565b600061253e82612bd5565b6125488185612bed565b935061255383612bc5565b8060005b8381101561258457815161256b88826124fd565b975061257683612be0565b925050600181019050612557565b5085935050505092915050565b61259a81612d05565b82525050565b6125a981612d61565b82525050565b6125b881612d73565b82525050565b60006125cb600283612bfe565b91507f42310000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061260b600283612bfe565b91507f42370000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061264b600583612bfe565b91507f47533230310000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061268b600283612bfe565b91507f42330000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006126cb600583612bfe565b91507f47533230330000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061270b600283612bfe565b91507f42350000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061274b600283612bfe565b91507f42340000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061278b600283612bfe565b91507f42320000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006127cb600583612bfe565b91507f47533230320000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061280b600583612bfe565b91507f47533230340000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061284b600283612bfe565b91507f42360000000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061288b600583612bfe565b91507f47533230350000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6128c781612d57565b82525050565b60006020820190506128e26000830184612524565b92915050565b60006040820190506128fd6000830185612524565b61290a6020830184612524565b9392505050565b60006060820190506129266000830186612524565b6129336020830185612524565b61294060408301846128be565b949350505050565b600060408201905061295d6000830185612524565b61296a60208301846128be565b9392505050565b6000602082019050818103600083015261298b8184612533565b905092915050565b60006020820190506129a86000830184612591565b92915050565b60006080820190506129c360008301876125af565b6129d06020830186612524565b6129dd60408301856128be565b6129ea60608301846125a0565b95945050505050565b60006020820190508181036000830152612a0c816125be565b9050919050565b60006020820190508181036000830152612a2c816125fe565b9050919050565b60006020820190508181036000830152612a4c8161263e565b9050919050565b60006020820190508181036000830152612a6c8161267e565b9050919050565b60006020820190508181036000830152612a8c816126be565b9050919050565b60006020820190508181036000830152612aac816126fe565b9050919050565b60006020820190508181036000830152612acc8161273e565b9050919050565b60006020820190508181036000830152612aec8161277e565b9050919050565b60006020820190508181036000830152612b0c816127be565b9050919050565b60006020820190508181036000830152612b2c816127fe565b9050919050565b60006020820190508181036000830152612b4c8161283e565b9050919050565b60006020820190508181036000830152612b6c8161287e565b9050919050565b6000602082019050612b8860008301846128be565b92915050565b6000606082019050612ba360008301866128be565b612bb060208301856128be565b612bbd6040830184612524565b949350505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612c1a82612d57565b9150612c2583612d57565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c5a57612c59612df8565b5b828201905092915050565b6000612c7082612d57565b9150612c7b83612d57565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cb457612cb3612df8565b5b828202905092915050565b6000612cca82612d57565b9150612cd583612d57565b925082821015612ce857612ce7612df8565b5b828203905092915050565b6000612cfe82612d37565b9050919050565b60008115159050919050565b6000819050612d1f82612e56565b919050565b6000819050612d3282612e6a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612d6c82612d11565b9050919050565b6000612d7e82612d24565b9050919050565b6000612d9082612d57565b91506000821415612da457612da3612df8565b5b600182039050919050565b6000612dba82612d57565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ded57612dec612df8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612e6757612e66612e27565b5b50565b60028110612e7b57612e7a612e27565b5b50565b612e8781612cf3565b8114612e9257600080fd5b50565b612e9e81612d05565b8114612ea957600080fd5b50565b612eb581612d57565b8114612ec057600080fd5b5056fea26469706673582212204f28546cf2b7e4a61305ad6cac0de85654b770a959dde07b9aa69888c814c7ff64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addProposal(uint256,address)": {
        "details": "Allows to add a new proposal about adding or removing owner.      The proposer automatically votes on her proposal."
      },
      "executeProposal(uint256)": {
        "details": "Adds or removes an owner as specified by the accepted proposal.      Is public to enable external triggering of execution.      This is important when majority ratios of Liquidity Pool have changed.      E.g. a major LP leaves the pool, so that a majority for a proposal is suddenly reached."
      },
      "getOwners()": {
        "details": "Returns array of owners.",
        "returns": {
          "_0": "Array of Safe owners."
        }
      },
      "isMajorityVote(uint256)": {
        "details": "Checks if a majority of LP token holders has voted for proposal.",
        "returns": {
          "_0": "Returns true if majority is reached."
        }
      },
      "stake()": {
        "details": "Allows to stake all liquidity provider (LP) tokens from the balancer pool.      Without staking voting/proposing is not possible.      This contract must have been approved with the balancer pool first."
      },
      "unstake()": {
        "details": "Allows to unstake LP tokens.      Triggers removal of outstanding votes to avoid double voting."
      },
      "vote(uint256)": {
        "details": "Allows to vote on a proposal.      If majority is reached (votes > half of total supply of LP tokens) proposal is executed."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProposal(uint256,address)": {
        "notice": "Updates proposals. Updates the total number of proposals."
      },
      "executeProposal(uint256)": {
        "notice": "Sets the proposal status to closed."
      },
      "stake()": {
        "notice": "Updates the caller's stakes."
      },
      "unstake()": {
        "notice": "Updates the caller's stakes. Removes caller's votes from open proposals."
      },
      "vote(uint256)": {
        "notice": "Updates votes on a proposal. Marks that voter has voted for a proposal (= update to votes)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 933,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 935,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "ownerCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 937,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "threshold",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 78,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "bPool",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1288"
      },
      {
        "astId": 87,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "numberProposals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 91,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "stakes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 96,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "votes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 101,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "proposals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Proposal)23_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1288": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)12": {
        "encoding": "inplace",
        "label": "enum Ballot.ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalType)9": {
        "encoding": "inplace",
        "label": "enum Ballot.ProposalType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)23_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ballot.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)23_storage"
      },
      "t_struct(Proposal)23_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Proposal",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "proposalType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ProposalType)9"
          },
          {
            "astId": 17,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "owner",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "proposalStatus",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(ProposalStatus)12"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}